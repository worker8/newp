apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

ext {
    sdkVersion = 26
    minVersion = 17
    toolsVersion = '26.0.2'

    supportVersion = '26.1.0'
    constraintLayoutVersion = '1.0.2'
    archComponentVersion = '1.0.0'
    rxJavaVersion = '2.1.6'
    rxAndroidVersion = '2.0.1'
    reactiveAndroidVersion = '1.0.0-alpha3'
}

android {
    compileSdkVersion sdkVersion
    buildToolsVersion toolsVersion
    defaultConfig {
        applicationId "beepbeep.pixels"
        minSdkVersion minVersion
        targetSdkVersion sdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    def secretKeys = ['REDDIT_DEVELOPER_NAME', 'REDDIT_CLIENT_ID', 'REDDIT_REDIRECT_URL']
    def secretProperties = getSecretProperties(secretKeys)
    buildTypes.each { buildType ->
        secretKeys.each { key ->
            buildType.buildConfigField 'String', key, "${secretProperties[key]}"
        }
    }

    buildTypes {
        debug {

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    repositories {
        google()
        jcenter()
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':rxjraw')
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    implementation "android.arch.lifecycle:runtime:$archComponentVersion"
    implementation "android.arch.lifecycle:extensions:$archComponentVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$archComponentVersion"
    implementation "android.arch.persistence.room:rxjava2:$archComponentVersion"
    kapt "android.arch.persistence.room:compiler:$archComponentVersion"

    implementation "android.arch.persistence.room:runtime:$archComponentVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$archComponentVersion"

    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"

    implementation "com.github.kittinunf.reactiveandroid:reactiveandroid-ui:$reactiveAndroidVersion"
    implementation "com.github.kittinunf.reactiveandroid:reactiveandroid-appcompat-v7:$reactiveAndroidVersion"
    implementation "com.github.kittinunf.reactiveandroid:reactiveandroid-support-v4:$reactiveAndroidVersion"
    implementation "com.github.kittinunf.reactiveandroid:reactiveandroid-design:$reactiveAndroidVersion"

    implementation 'com.github.bumptech.glide:glide:4.3.1'
    kapt 'com.github.bumptech.glide:compiler:4.3.1'

    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }

    debugImplementation 'com.amitshekhar.android:debug-db:1.0.1'

    testImplementation 'junit:junit:4.12'
    testImplementation('com.nhaarman:mockito-kotlin:1.5.0') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    // testCompile "android.arch.persistence.room:testing:$archComponentVersion"
}

def getSecretProperties(ArrayList<String> keys) {
    def properties = new Properties()
    if (System.getenv('CI')) {
        keys.each { properties.setProperty(it, System.getenv(it)) }
    } else {
        properties.load(new FileInputStream(rootProject.file("secrets.properties")))
    }
    return properties
}